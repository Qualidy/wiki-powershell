{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\u00dcbersicht","text":"<p>Schneller Navigieren</p> <p>P oder , : Zur vorherigen Seite gehen (Previous)</p> <p>N oder . : Zur n\u00e4chsten Seite gehen (Next)</p>"},{"location":"#dateisystemarten","title":"Dateisystemarten","text":"<ul> <li> Theorie</li> <li> Unix Dateisystem</li> <li> Dateisystemvergleich</li> </ul>"},{"location":"#systemadministrator","title":"Systemadministrator","text":"<ul> <li> Aufgaben eines Systemadministrators</li> </ul>"},{"location":"#powershell","title":"Powershell","text":"<ul> <li> Einstieg</li> <li> Tag 1</li> </ul>"},{"location":"content/1/","title":"1 Einf\u00fchrung","text":"Erstes GUI \u2013 Label und zwei Buttons <p>Erstelle ein WinForms-Projekt, f\u00fcge ein Label <code>LblAnzeige</code> und zwei Buttons <code>CmdHallo</code>, <code>CmdEnde</code> ein.</p> <ul> <li> <p>Form-Text: \u201eMein erstes Projekt\u201c</p> </li> <li> <p><code>LblAnzeige</code> zun\u00e4chst leer, mit Rahmen (<code>FixedSingle</code>)</p> </li> </ul> \\[ \\frac{10}{12}x \\] Tipp <p>Hier noch ein Tip</p> L\u00f6sung L\u00f6sungsvideo <p> </p> <pre><code>// Eigenschaften per Designer setzen.\n// Optional per Code im Form_Load:\nprivate void Form1_Load(object sender, EventArgs e)\n{\n    this.Text = \"Mein erstes Projekt\";\n    LblAnzeige.Text = \"\";\n    LblAnzeige.BorderStyle = BorderStyle.FixedSingle;\n}\n</code></pre> <pre><code>flowchart TD\n    A[Christmas] --&gt;|Get money| B(Go shopping)\n    B --&gt; C{Let me think}\n    C --&gt;|One| D[Laptop]\n    C --&gt;|Two| E[iPhone]\n    C --&gt;|Three| F[fa:fa-car Car]</code></pre>"},{"location":"content/admin/admin/","title":"Aufgaben eines Systemadministrators im Betrieb","text":"<p>Systemadmins stellen sicher, dass IT-Systeme stabil, sicher und performant laufen. Sie betreiben Infrastruktur (Server, Netzwerk, Clients, Cloud), automatisieren Routineaufgaben, unterst\u00fctzen Nutzer und setzen Sicherheits-/Compliance-Vorgaben um.</p>"},{"location":"content/admin/admin/#beispiele-aus-der-wirtschaft","title":"Beispiele aus der Wirtschaft","text":"Video Video Video Text <p> Interview bei sheer imc</p>"},{"location":"content/admin/admin/#kernaufgaben","title":"Kernaufgaben","text":""},{"location":"content/admin/admin/#betrieb-wartung","title":"Betrieb &amp; Wartung","text":"<ul> <li>Computer und Server einrichten und aktuell halten  </li> <li>Benutzer und Zugriffsrechte verwalten  </li> <li>Dienste wie Dateien, E-Mail oder Drucker bereitstellen  </li> <li>Systeme \u00fcber ihren gesamten Lebenszyklus betreuen  </li> </ul>"},{"location":"content/admin/admin/#netzwerk","title":"Netzwerk","text":"<ul> <li>Netzwerke einrichten und pflegen (LAN, WLAN, VPN)  </li> <li>Fehler und Leistungsprobleme beheben  </li> </ul>"},{"location":"content/admin/admin/#sicherheit","title":"Sicherheit","text":"<ul> <li>Schutz vor Viren und Angriffen sicherstellen  </li> <li>Regelm\u00e4\u00dfige Updates und Sicherheitspr\u00fcfungen durchf\u00fchren  </li> <li>Backups erstellen und Wiederherstellungen testen  </li> </ul>"},{"location":"content/admin/admin/#uberwachung-verfugbarkeit","title":"\u00dcberwachung &amp; Verf\u00fcgbarkeit","text":"<ul> <li>Systeme und Dienste \u00fcberwachen  </li> <li>Kapazit\u00e4ten planen (z. B. Speicher, Leistung)  </li> <li>Fr\u00fchzeitig Probleme erkennen und vorbeugen  </li> </ul>"},{"location":"content/admin/admin/#automatisierung-scripting","title":"Automatisierung &amp; Scripting","text":"<ul> <li>Wiederkehrende Aufgaben mit Skripten automatisieren  </li> <li>Standardkonfigurationen vorgeben  </li> </ul>"},{"location":"content/admin/admin/#support-zusammenarbeit","title":"Support &amp; Zusammenarbeit","text":"<ul> <li>Unterst\u00fctzung bei Problemen leisten (2nd-/3rd-Level)  </li> <li>Ticketsysteme nutzen, um Anfragen zu verwalten  </li> <li>Wissen dokumentieren und teilen  </li> </ul>"},{"location":"content/admin/admin/#prozesse-dokumentation","title":"Prozesse &amp; Dokumentation","text":"<ul> <li>\u00c4nderungen und St\u00f6rungen dokumentieren  </li> <li>Ger\u00e4te, Lizenzen und Vertr\u00e4ge im Blick behalten  </li> <li>Datenschutz und interne Vorgaben einhalten  </li> </ul>"},{"location":"content/admin/admin/#projekte","title":"Projekte","text":"<ul> <li>Neue Systeme oder Cloud-L\u00f6sungen einf\u00fchren  </li> <li>Kosten und Nutzen neuer Technologien abw\u00e4gen  </li> </ul>"},{"location":"content/admin/admin/#tagesablauf-beispiel","title":"Tagesablauf (Beispiel)","text":"<ol> <li>Morgens: Meldungen und Anfragen pr\u00fcfen  </li> <li>Vormittags: Updates einspielen, Rechte vergeben, neue Nutzer einrichten  </li> <li>Nachmittags: Projekte bearbeiten, komplexe Probleme l\u00f6sen  </li> <li>Abends: Dokumentation aktualisieren, Backups pr\u00fcfen  </li> </ol>"},{"location":"content/admin/admin/#regelmaige-routinen","title":"Regelm\u00e4\u00dfige Routinen","text":"<ul> <li>T\u00e4glich: Meldungen und Backups pr\u00fcfen, dringende Tickets bearbeiten  </li> <li>W\u00f6chentlich: Updates testen und einspielen  </li> <li>Monatlich: Sicherheitspr\u00fcfungen und Wiederherstellungstests  </li> <li>Quartalsweise: Notfall\u00fcbungen und System\u00fcberpr\u00fcfungen  </li> </ul>"},{"location":"content/admin/admin/#wichtige-fahigkeiten","title":"Wichtige F\u00e4higkeiten","text":"<ul> <li>Umgang mit Windows- und Linux-Systemen  </li> <li>Grundwissen \u00fcber Netzwerke  </li> <li>Basiskenntnisse in Skripten/Automatisierung  </li> <li>Saubere Dokumentation und Kommunikation  </li> </ul>"},{"location":"content/dateisysteme/dateisysteme_theorie/","title":"Dateisystem- und Speicherverwaltung","text":"<p>Definition</p> <p>Ein Sekund\u00e4rspeicher ist ein nichtfl\u00fcchtiger Datenspeicher, der Daten dauerhaft speichert, auch wenn der Strom abgeschaltet ist.</p> <p>Im Gegensatz ist der fl\u00fcchtigen Prim\u00e4rspeicher (RAM), bei dem Daten verloren gehen, wenn das Ger\u00e4t ausgeschaltet wird.</p>"},{"location":"content/dateisysteme/dateisysteme_theorie/#aufgaben-der-sekundarspeicherverwaltung","title":"Aufgaben der Sekund\u00e4rspeicherverwaltung","text":"<ul> <li>Dateien = Sequenzen von Bl\u00f6cken, die relativ zum Beginn nummeriert sind.</li> <li>Aufgaben:<ol> <li>Zuweisung von Bl\u00f6cken zu Dateien  </li> <li>Verwaltung freier Bl\u00f6cke  </li> <li>Verwaltung defekter Bl\u00f6cke  </li> </ol> </li> </ul>"},{"location":"content/dateisysteme/dateisysteme_theorie/#dateizuordnungsverfahren","title":"Dateizuordnungsverfahren","text":"<p>Wie teilt man Dateien auf eine Festplatte auf?</p> <p>Wir betrachten drei Arten theoretische Arten der Zuordnung:</p> <ul> <li>Contiguos Allocation</li> <li>Chained Allocation</li> <li>Indexed Allocation</li> </ul> <p>Chained und Indexed Allocation sind sogenannte distributed Allocations.</p>"},{"location":"content/dateisysteme/dateisysteme_theorie/#contiguous-allocation","title":"Contiguous Allocation","text":"<ul> <li>Dateien liegen in zusammenh\u00e4ngenden Bl\u00f6cken.  </li> <li>Verwaltungseintrag: Startblock + L\u00e4nge.  </li> <li>Vorteile: schnelle sequentielle und wahlfreie Zugriffe, einfaches Management.  </li> <li>Nachteile: externe Fragmentierung, teures Vergr\u00f6\u00dfern, Kompaktierung n\u00f6tig.  </li> </ul> <p>Nach der Kompaktierung: </p>"},{"location":"content/dateisysteme/dateisysteme_theorie/#distributed-allocation","title":"Distributed Allocation","text":"<ul> <li>Nur interne Fragmentierung.  </li> <li>Dynamische Gr\u00f6\u00dfen\u00e4nderungen leicht m\u00f6glich.  </li> <li>Nachteile: kein einheitlicher Zugriff, komplexeres Management.  </li> <li>Varianten:<ul> <li>Chained Allocation: Jeder Block enth\u00e4lt Zeiger auf den n\u00e4chsten. Gut f\u00fcr sequentielle Dateien.  </li> <li>Indexed Allocation: Indexblock enth\u00e4lt alle Blockadressen der Datei.  </li> </ul> </li> </ul> <p>Chained Allocation </p> <p>Chained Allocation after Consolidation </p> <p>Indexed Allocation </p>"},{"location":"content/dateisysteme/dateisysteme_theorie/#hybride-ansatze","title":"Hybride Ans\u00e4tze","text":"<p>Wir haben hier nur drei Hauptans\u00e4tze vorgestellt, die nat\u00fcrlich clever gemixt werden k\u00f6nnen.</p> <ul> <li>Kombination von Clustering + verteilter Allokation.  </li> <li>Defragmentierung f\u00fcr Performance wichtig.  </li> </ul>"},{"location":"content/dateisysteme/dateisysteme_theorie/#verwaltung-von-blocken","title":"Verwaltung von Bl\u00f6cken","text":"<ul> <li>Nutzung von logischen Blocknummern (0 \u2026 n\u22121), unabh\u00e4ngig von CHS.  </li> <li>Beispiel: 250 GiB Disk, Blockgr\u00f6\u00dfe 1 KiB \u2192 250 Mio. Bl\u00f6cke.  </li> <li>Freie/defekte Bl\u00f6cke werden \u00fcber Bitlisten verwaltet.  </li> <li>Normalerweise werden 32 oder 64 bit benutzt, um einen Block zu identifizieren.</li> </ul> <p>Wie viele Bl\u00f6cke werden ben\u00f6tigt, um zu tracken, ob bl\u00f6cke belegt/frei/defekt sind?</p> <p>Beispiel: </p> \\[ \\frac{250 \\cdot 10^6}{8 \\text{ Byte}} = 31{,}25 \\text{ MB} = 29{,}8 \\text{ MiB}   \\]"},{"location":"content/dateisysteme/other/","title":"Dateisystemvergleich","text":"Video"},{"location":"content/dateisysteme/other/#kernaussagen-kurzfassung","title":"Kernaussagen (Kurzfassung)","text":"<ul> <li>FAT32 ist sehr kompatibel, unterst\u00fctzt aber nur Dateien bis 4 GB und ist f\u00fcr moderne, gro\u00dfe Datentr\u00e4ger ungeeignet.</li> <li>exFAT ist der Kompromiss f\u00fcr Wechseldatentr\u00e4ger (USB/SD): gro\u00dfe Dateien, wenig Overhead, breite Unterst\u00fctzung in Windows, macOS und vielen Ger\u00e4ten.</li> <li>NTFS ist das Standard-Dateisystem f\u00fcr Windows-Laufwerke mit Rechten, Verschl\u00fcsselung, Quotas, Kompression und Journaling.</li> <li>ext4 ist das Standard-Dateisystem vieler Linux-Distributionen; unterst\u00fctzt gro\u00dfe Volumes/Dateien, Journaling und Extents.</li> <li>APFS ist das moderne Dateisystem von Apple (macOS/iOS/iPadOS): Copy-on-Write, Snapshots, Verschl\u00fcsselung, f\u00fcr SSDs optimiert.</li> </ul>"},{"location":"content/dateisysteme/other/#vergleichstabelle","title":"Vergleichstabelle","text":"Merkmal FAT32 exFAT NTFS ext4 APFS Typische Nutzung Sehr alte Ger\u00e4te, maximale Kompatibilit\u00e4t USB-Sticks, SD-Karten, externe Laufwerke Windows-System-/Datenlaufwerke, externe Laufwerke (Windows-fokussiert) Linux-System-/Datenlaufwerke macOS-/iOS-Ger\u00e4te, Apple-\u00d6kosystem Max. Dateigr\u00f6\u00dfe (typisch) 4 GB sehr gro\u00df (praktisch &gt;&gt; 4 GB) sehr gro\u00df (praktisch &gt;&gt; TB) sehr gro\u00df (praktisch &gt;&gt; TB) sehr gro\u00df (praktisch &gt;&gt; TB) Journaling (\u00c4nderungsprotokoll f\u00fcr Crash-Konsistenz) \u2717 \u2717 \u2713 \u2713 \u2713 (Copy-on-Write) Rechte/ACLs (steuern, wer lesen/schreiben/ausf\u00fchren darf) \u2717 \u2717 \u2713 \u2713 (POSIX/ACL) \u2713 Plattform-Kompatibilit\u00e4t Breite Ger\u00e4te-Kompatibilit\u00e4t Breite OS-/Ger\u00e4te-Kompatibilit\u00e4t Windows nativ; Linux/macOS mit Treibern/Read-Only Linux nativ; andere OS teils nur mit Tools Apple-Ger\u00e4te nativ Besonderheiten Einfache Struktur, schnell, aber limitiert Guter Mittelweg f\u00fcr gro\u00dfe Dateien auf Wechseldatentr\u00e4gern MFT, EFS, BitLocker-Support, Quotas Extents, HTree-Verzeichnisse Snapshots, Verschl\u00fcsselung, SSD-optimiert <p>Schnellauswahl</p> <ul> <li>USB/SD zwischen Windows &amp; macOS: exFAT </li> <li>Windows-System/Arbeits-SSD: NTFS </li> <li>Linux-System/Server: ext4 (oder XFS/Btrfs je nach Bedarf)  </li> <li>Apple-Ger\u00e4te: APFS</li> </ul>"},{"location":"content/dateisysteme/other/#genutzte-allocationtypen","title":"Genutzte Allocationtypen","text":"Speicherstrategie Prinzip Typische Dateisysteme Bemerkungen Contiguous Allocation (zusammenh\u00e4ngend) Jede Datei liegt in einem durchgehenden Blockbereich auf dem Datentr\u00e4ger. Sehr alte Systeme (z. B. fr\u00fche CP/M, einfache Embedded-Dateisysteme) Einfach, schnelle Zugriffe, aber Fragmentierung-Probleme. In modernen Dateisystemen kaum genutzt. Chained Allocation (verkettet) Datei besteht aus Bl\u00f6cken, die jeweils einen Zeiger auf den n\u00e4chsten Block enthalten (wie eine verkettete Liste). FAT12/16/32 (File Allocation Table) FAT speichert die Ketten in einer separaten Tabelle (\u201eFAT\u201c). Vorteil: keine externe Fragmentierung, Nachteil: langsamer zuf\u00e4lliger Zugriff. Indexed Allocation (indiziert) Jede Datei hat eine Index-Struktur (z. B. Inode), die die Blockadressen enth\u00e4lt. UFS, ext2/3/4, NTFS, XFS, Btrfs, ZFS, APFS Sehr flexibel, erlaubt gro\u00dfe Dateien, einfacher Direktzugriff. Praktisch Standard in modernen Dateisystemen. <p> \u00dcbersicht \u00fcber FAT-, HPFS- und NTFS-Dateisysteme bei Windows Client</p>"},{"location":"content/dateisysteme/other/#praxis-eigenes-system-prufen-nur-lesend","title":"Praxis: Eigenes System pr\u00fcfen (nur lesend)","text":"Windows (PowerShell)LinuxmacOS <pre><code>Get-Volume | Select DriveLetter, FileSystem, FileSystemLabel, Size, SizeRemaining\n</code></pre> <pre><code>lsblk -f\n# oder\ndf -T\n</code></pre> <pre><code>diskutil list\ndiskutil info /Volumes/DeinVolume\n</code></pre>"},{"location":"content/dateisysteme/unix/","title":"UNIX-Dateisystem (ext-Familie als Beispiel)","text":""},{"location":"content/dateisysteme/unix/#aufbau","title":"Aufbau","text":"<ul> <li>Boot Block: Startprogramm.  </li> <li>Superblock: Metadaten des Dateisystems.  </li> <li>Inodes: enthalten Dateiinformationen.  </li> <li>Datenbl\u00f6cke: eigentliche Inhalte.  </li> </ul>"},{"location":"content/dateisysteme/unix/#superblock","title":"Superblock","text":"<p>Der Superblock enth\u00e4lt die folgenden Informationen:</p> <ul> <li>Gr\u00f6\u00dfe des Dateisystems in Bl\u00f6cken</li> <li>Gesamtzahl der Inodes</li> <li>Anzahl der reservierten Bl\u00f6cke</li> <li>Anzahl der freien Bl\u00f6cke und Inodes</li> <li>Blockgr\u00f6\u00dfe</li> <li>Zeitstempel (letzter Mount, letzter Schreibzugriff, letzte Dateisystempr\u00fcfung)</li> <li>Nur f\u00fcr Root-Benutzer zug\u00e4nglich</li> </ul>"},{"location":"content/dateisysteme/unix/#inodes","title":"Inodes","text":"<p>F\u00fcr jedes Inode gilt:</p> <ul> <li>Feste Gr\u00f6\u00dfe (z. B. 64 Byte).  </li> <li>Enthalten: Rechte, Link-Count, Owner, Gr\u00f6\u00dfe, Blockadressen.  </li> <li>Besondere Inodes:</li> <li>0 = nicht existent  </li> <li>1 = defekte Bl\u00f6cke  </li> <li>2 = Root-Verzeichnis  </li> </ul> <p></p>"},{"location":"content/dateisysteme/unix/#indirektionen","title":"Indirektionen","text":"<ul> <li>Direkte Adressen (z. B. 12 Bl\u00f6cke).  </li> <li>Falls Datei gr\u00f6\u00dfer: Nutzung von einfacher, doppelter, dreifacher Indirektion.  </li> </ul> <p>Daraus ergibt sich eine Maximale gr\u00dfe von Dateien: Beispiel (1 KiB Block, 32-bit Blocknummern): </p> \\[ 12 + 256 + 256^2 + 256^3 \\text{ blocks} = 16843020 \\text{ blocks} \u2248 16 \\text{ GiB} \\] <p></p>"},{"location":"content/powershell/beispiele/","title":"Ober\u00fcberschrift","text":""},{"location":"content/powershell/beispiele/#h2-uberschrift","title":"h2-\u00dcberschrift","text":""},{"location":"content/powershell/beispiele/#h3-uberschrift","title":"h3-\u00dcberschrift","text":"<p>Hier k\u00f6nnte Ihre Werbung stehen... \ud83d\ude09</p> <p>Wie teuer ist Ihr Auto?\ud83d\ude97</p> <ul> <li>Item 1</li> <li>Item 2</li> <li>Auflistung</li> </ul> <p>Das hier is ganz wichtig. Und manches m\u00f6chte man kursiv schreibe.</p> <p>Hier kommt Python Code</p> <pre><code>from math import pi\n\na = pi * 4\n\ndef myfunc(param):\n    return param / 2\n</code></pre> <p>wir werden <code>bash</code> oder <code>powershell</code> verwenden.</p> <pre><code>get-volume\n</code></pre> <p>| schreibt man mit AltGr+&lt;</p> <p>Tabellenerstellung volle Schreibw | Spalten\u00fcberschrift 1 | Spalten\u00fcberschrift 2 |  |----------------------|----------------------| | Inhalt               | Inhalte2             | | weitere Inhalte      | Inhalte              |</p> <p>vereinfachte Darstellung | col 1 | col 2 | |-|-| | <code>get-volume</code> | Gibt Informationen \u00fcber die Sekund\u00e4ren speicher, die angeschlossen sind | | <code>get-help</code> | Gibt eine Hilfe zu dem angegebenen Befehl | </p> <p>Icons: Windowstaste + .</p> <p>\ud83e\udd2f \ud83d\udc14 \ud83d\ude12\ud83d\ude12\ud83d\ude12</p> <p>\ud83d\udc16 \ud83d\ude01\ud83d\udc8a\ud83d\udc4d\ud83d\udc95\ud83d\udc95\ud83d\udc4c\ud83e\udd22\ud83e\udd22\ud83d\ude0e\ud83d\ude01</p>"},{"location":"content/powershell/intro/","title":"Einstieg in Powershell","text":"<p>PowerShell ist ein plattform\u00fcbergreifendes Tool von Microsoft f\u00fcr IT-Profis zur Automatisierung von Aufgaben und zur Systemverwaltung. </p> <p>Es ist eine Kombination aus einer Befehlszeilenshell und einer Skriptsprache, die auf .NET basiert und mit Objekten statt nur mit Text arbeitet, was das Verbinden von Befehlen erleichtert. </p> <p>Die Open-Source-Version PowerShell (auch PowerShell Core genannt) l\u00e4uft unter Windows, Linux und macOS.</p>"},{"location":"content/powershell/intro/#powershell-starten","title":"PowerShell starten","text":"<p>Es gibt verschiedene M\u00f6glichkeiten PowerShell zu starten:</p> Windows Poershell startenPowershell in der beliebiger Console startenPowershell ISE <p>Geben Sie in ihrer Suchleiste \"powershell\" ein und starten Sie die Windows PowerShell:</p> <p></p> <p></p> <p>Sie k\u00f6nnen auch in einer beliebigen Konsole PowerShell mit dem Befehl</p> <pre><code>PowerShell\n</code></pre> <p>starten. Dass Sie sich nun in der Powershell befinden, erkennen Sie an dem <code>PS</code> am Anfang der Zeile.</p> <p></p> <p>Die PowerShell ISE (Integrated Scripting Environment) ist eine grafische Benutzeroberfl\u00e4che (GUI) f\u00fcr Windows PowerShell, mit der Benutzer Skripte erstellen, testen und debuggen k\u00f6nnen</p> <p></p> <p>Trainings von Windows</p> <p> Einf\u00fchrung in Powershell</p> <p> Ermitteln von Befehlen in PowerShell</p> <p> Verkn\u00fcpfen von Befehlen in einer Pipeline</p> <p> Schreiben Ihres ersten PowerShell-Codes</p>"},{"location":"content/powershell/tag1/","title":"Cmdlet","text":"<p>Ein PowerShell-Befehl, die in der Konsole ausgef\u00fchrt werden kann, wird <code>Cmdlet</code> genannt.</p> <p>Es hat immer die Form:</p> <pre><code>&lt;Cmdlet&gt; -Parameter Wert\n</code></pre> <pre><code>get-childitem                        # Listet Dateien/Ordner im aktuellen Verzeichnis\nget-childitem -recurse -depth 2      # mit dem Zusatz -recurse durchsucht man auch alle Unterverzeichnisse -depth gibt tiefe an\n\nget-help &lt;Befehl&gt;                    # Zeigt Hilfe zu einem Cmdlet\nget-help &lt;Befehl&gt; -online            # \u00d6ffnet getOnline-Hilfe\n\nget-command -Noun Date               # -noun sucht nach Cmdlets mit bestimmten Begriffen (im Beispiel Date)\nget-command -noun Date -verb get     # -verb sucht nach Cmdlets mit bestimmten Verben (Beispiel get -&gt; get-date)\nget-command -noun D*                 # * dient als Platzhalter (Beispiel listet alle Cmdlets mit D... auf)\nv\nget-process                          # zeigt alle aktuell laufenden (Hintergrund)Prozesse an\nstop-process -name &lt;Name&gt;            # beendet den angegebenen Prozess \nstop-process -name &lt;Name&gt; -confirm   # -confirm \u00f6ffnet vor beenden ein Best\u00e4tigungsfenster\n\n&lt;Objekt&gt; | get-member                # zeigt alle Methoden und Eigenschaften zu einem Objekt\n\nshow-command -name &lt;Befehl&gt;          # \u00f6ffnet ein Fenster in dem man die Paramenter zu einem Befehl festlegen und diesen ausf\u00fchren kann \n\nget-history                          # zeigt alle in der aktuellen PowerShell-Session eingegebenen Kommandozeilen\n</code></pre>"},{"location":"content/powershell/tag1/#informationen-verarbeiten-und-ausgeben","title":"Informationen verarbeiten und ausgeben","text":"<pre><code>Get-Process -Name powershell | Select-Object -Property Id, ProcessName\nget-process -name powershell | select-object -property * | Export-csv eigenschaften.csv #Alle Eigenschaften in eine Datei ausgeben\nGet-ChildItem -File | Select-Object -Property Extension, Length, Name  | sort-object -property name\n# Ausgabe bestimmter Eigenschaften danach sortiert\n1..3 | ForEach-Object -Process { Test-Connection 127.0.0.$_ -Count 1} # Arbeiten mit Prozessen\n</code></pre>"}]}